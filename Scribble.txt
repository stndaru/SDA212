a
b
c
d
e
f
g


#BOT gfa

#FRONT de


use DEQUE
when evaluate, take from the back, put into stack
everytime an item taken into stack, set increase to true

COUNTER: take last add to front, take front add to last

new method: take from front
pointer pointing from first, everytime it takes, check if current pos higher (lower value) than early or not

tiap kali harus manggil dan iterate
solusi sekarang: tiap eval individu, iterate ambil lalu taro kembali O(2n) jika ada 5000 jadi O(10000N)
solusi tampung: tiap eval ambil lalu tampung yang dicari, sisanya balikin O(2n)




everytime eval, add name to hashmap, value sequence...command
if call name already in set, change value of sequence to index and update command

once done, O(n) iterate hashmap and place in order on 2D array [[person, order]]
O(n) iterate deque, elements in set will be placed in hashmap Person, else placed in tempdeque
O(n) place from tempdeque back to maindeque


For selecting, use hashmap and student, dont use deque
{name, murid[current, prev, next]}
and kept an array to store first and last element

example [...,A,B,C,...]
{A,..,B}{B,A,C}{C,B,..}
remove B, so get B value[0], store to temp
get B value[1], set value[2] (next) of the prev from B to value[2] (next) of b
so {A,..,C}
get B value[2], set value[1] (prev) of the next from B to value[1] (prev) of b
so {C,..,A}

example in depth
in array form:
person = [ObjA, ObjB, ObjC]
in hashmap pointer form:
person = {A: [ObjA, null, ObjB], B: [ObjB, ObjA, ObjC], C: [ObjC, ObjB, null]}

if add to front, get front element (get the key from arr[0])
set the value[1] of front element from null to B 
set value[2] of B to front element, and set value[1] of B to null
remove front element and replace it with B in front array

same logic from behind


DEPLOY
take leaps




LAB 5 ------------------------------
SOLUTION 1 - Everything in one BST
AVL Tree will always be balanced, so need 2 pointers to traverse the Tree
Greedy, find highest interval, but check type must be different
If found multiple highest interval, save them and then compare later

Given interval X,Y
Fpointer finds through left node the closest value to X
Spointer finds through right node closest value to Y
After found, check both types

If different, return
else
CASE 1 - move Fpointer to higher value
CASE 2 - move Spointer to lower value 


SOME BRAINSTORM IDEAS ----------
So both pointers uses inorder traversal

Display AVL Tree in In order
5 10 15 20 30 40 50 55 60 65 70 80 85 90

which traverse from smallest or largest, depends on going left or right first
and if value is smaller or larger than desired, stop

SOLUTION ONE - USES EXTERNAL ARRAY
Then add the elements to an array, and then find highest difference whilst checking if type are the same or not
When adding elements to array, only get the lowest and highest value, and to check, use a hashmap for the value

ISSUE: try to find how to limit the inorder traversal, only going straight for the limit node
SOLUTION: on the method for traversal, add argument for checking if nodes about to be checked is lower/higher or not
(closest to X or Y)


YEEToutofthebox ----------
Every candy has one DS holding it, which holds all value from smallest to highest
When deleting, delete the current, if its in min, move it up, if its in max, move it down
When inserting, insert at the appropriate spot
When finding highest diff, get every lowest (most left node) and highest (most right node) of every candy, 
and find absolute lowest and absolute highest using counter

Perhaps each candy is one Tree? And has a value for highest and lowest value

The issue is that deletion aims for box name which contains the price value
{Box:[Type,Price]}



obj.insert(10);
        obj.insert(85);
        obj.insert(15);
        obj.insert(70);
        obj.insert(20);
        obj.insert(60);
        obj.insert(30);
        obj.insert(50);
        obj.insert(65);
        obj.insert(80);
        obj.insert(90);
        obj.insert(40);
        obj.insert(5);
        obj.insert(55);

        obj.insert(60);
\

14
Z 10 1
A 85 1
B 15 1
C 70 1
D 20 1
E 60 1
F 30 1
G 50 1
H 65 1
I 80 1
J 90 1
K 40 1
L 5 1
M 55 1
5
BELI 0 100
STOCK N 60 2
BELI 0 100
SOLD_OUT E
BELI 0 100

14
Z 10 1
A 85 2
B 15 3
C 70 4
D 20 5
E 60 6
F 30 7
G 50 8
H 65 9
I 80 10
J 90 11
K 40 12
L 5 13
M 55 14
3
BELI 0 100
SOLD_OUT E
BELI 0 100

2
A 20 3
B 20 4
1
BELI 20 20

2
A 20 3
B 7 2
3
BELI 20 20
STOCK C 15 4
BELI 12 23

2
A 20 1
B 25 2
10
BELI 10 10
BELI 10 30
BELI 20 20
BELI 25 25
SOLD_OUT B 
BELI 10 30
BELI 25 25
STOCK B 25 2
BELI 10 30
BELI 20 20

3
A 20 3
B 7 2
C 30 5
14
BELI 7 20
BELI 6 20
BELI 7 21
BELI 5 25
BELI 6 18
BELI 8 23
BELI 10 15
BELI 5 5
BELI 25 25
SOLD_OUT B
BELI 10 15
BELI 18 50
SOLD_OUT C
BELI 18 35


5
A 20 1
B 18 2
C 35 3
D 43 4
E 32 5
4
STOCK F 17 6
SOLD_OUT A
STOCK G 5 7
BELI 12 45


3
A 15 1
B 15 2
C 15 3
16
STOCK D 15 4
BELI 15 15
BELI 12 20
SOLD_OUT A
SOLD_OUT B
SOLD_OUT C
BELI 15 15
SOLD_OUT D
BELI 15 15
STOCK A 15 1
BELI 15 15
STOCK B 15 2
BELI 15 15
STOCK ABC 17 5
BELI 15 17
BELI 12 15

3
A 15 1
B 15 2
C 15 3
12
STOCK D 20 4
SOLD_OUT D
SOLD_OUT A
STOCK A 20 5
SOLD_OUT B
SOLD_OUT C
BELI 15 20
BELI 15 15
SOLD_OUT A
STOCK A 15 1
SOLD_OUT A
BELI 0 100

14
Z 10 1
A 85 2
B 15 3
C 70 4
D 20 5
E 60 6
F 30 7
G 50 8
H 65 9
I 80 10
J 90 11
K 40 12
L 5 13
M 55 14
9
BELI 0 100
SOLD_OUT Z
BELI 0 100
SOLD_OUT E 
BELI 0 100
SOLD_OUT C
BELI 0 100
STOCK C 70 4
BELI 0 100

5
A 20 1
B 18 2
C 35 3
D 43 4
E 32 5
5
STOCK F 17 6
SOLD_OUT A
STOCK G 5 7
BELI 90 100
BELI 12 45

0
1
BELI 0 100

Tree bentuknya beda
Objek salah masuk




================= LAB 6

LOGIC:
public static Dataran[] dataranList = new Dataran[200000];
Berisi dataran-dataran yang ada terurut dari urutan masuknya (Order Preserved)

public static HashMap<Integer, DDLNode> dataranMap = new HashMap<>();
Berisi linkedlist untuk Ketinggian x {Ketinggian : Dataran1-Dataran2-Dataran3....}
Jadi dataran-dataran dengan ketinggian sama dikumpulkan dalam satu LL, dan urutannya tetap terjaga
sesuai urutan masuk (dataran paling kiri berada paling head dari LL)

public static MinHeapArr minHeap = new MinHeapArr(200000);
minheap berisi ketinggian-ketinggian yang ada

Dataran
        ketinggian 
        urutan keberapa
        elemen berikutnya di LL 
        elemen sebelumnya di LL

DDLNode 
        dataran head 
        dataran prev
        ketinggian (opsional)

PERINTAH A x:
        Cek apakah sudah ada ketinggian x atau belum, jika belum, buat Mapnya dan 
        insert ketinggian ke dalam Heap 
        Jika sudah ada, get dari Map, lalu sambungkan ke LLnya

Perintah U x y:
        Ambil dataran sesuai urutannya di list/array, kemudian hapus dari LLnya
        Cek apakah ketinggian y ada atau tidak, jika belum, buat
        Jika sudah ada, sambung ke LL TAPI PERHATIKAN URUTANNYA (LL itu order preserved)
        Masukin dan manfaatin atribut urutan keberapa di dataran untuk cek, buat masukin 
        O(n) dengan n jumlah dataran di ketinggian sama gapapa masih masuk ama bisa 

PERINTAH R:
        Mirip2 ama U tapi bedanya ini ngambil elemen terkecil pake minHeap. Kalo diliat daritadi,
        pas ngupdate ketinggian elemen, ga ngotakngatik minHeap kan? Triknya di sini
        Jadi selama Map.get(minHeap.elemenTerkecil()) masih null, terus diremove elemen min di heapnya
        ampe ketemu elemen min yang ada datanya
        Abistu tinggal ambil, komparasi, dan logika sama kaya U


3
2 3 1
4
A 4
A 3
SANITY
R

5
3 4 2 3 2
5
SANITY
R
A 1
SANITY
R


6
5 4 1 3 2 1
4
A 5
SANITY
R
SANITY

3
2 3 1
5
A 4
A 3
R
U 4 2
R

3
2 3 1
9
A 4
A 3
SANITY
R
SANITY
U 4 2
SANITY
R
SANITY

5
1 2 3 1 5
13
SANITY
R
SANITY
R
SANITY
A 5
SANITY
R
SANITY
A 1
SANITY
R
SANITY


## TC1
7
3 1 6 10 6 8 8
5
R
U 6 8
U 0 4
U 1 8
R

## TC2
4
4 1 8 1
6
A 3
R
R
R
U 2 1
U 1 4

EXPECTED : 
8 1
8 3
8 0

## TC 3
4
8 4 1 7
7
R
R
U 1 3
R
U 2 6
A 5
R

## TC 4
2
4 1
4
A 10
R
R
A 1

EXPECTED:
10 1
10 0


## TC NullPointer Rotation
7
5 4 10 8 6 6 9
4
U 6 1
R
U 0 6
U 4 10

7
6 1 2 5 3 5 2
8
A 8
R
A 7
A 10
U 0 10
SANITY 
A 2
SANITY

SANITY
R


6
6 4 4 2 2 4
4
R
SANITY
R
SANITY
R
A 8
SANITY
R
A 6

5
10 8 10 7 3
4
U 4 10
SANITY
U 1 10
SANITY
A 6
SANITY
U 4 5


6
6 4 4 2 2 4
6
R
R
R
A 8
R
A 6


6
6 5 2 7 8 1
6
A 10
A 6
R
A 9
R
SANITY
R


3
2 4 5
8
A 9
A 5
U 2 7
A 9
A 7
U 1 4
A 2
U 6 2

Contoh Masukan
3
2 3 1
5
A 4
A 3
R
U 4 2
R


6
3 2 7 2 2 4
7
A 5
R
A 9
R
A 10
A 1
SANITY
U 2 3

3 2 7 2 2 4 5
7 7 7 2 2 4 5
7 7 7 2 2 4 5 9
7 7 7 7 7 4 5 9
7 7 7 7 7 4 5 9 10
7 7 7 7 7 4 5 9 10 1


3
2 4 5
5
A 9
A 5
U 3 7
A 7
U 1 4

2 4 5 9 5
2 4 5 7 5 7
2 4 5 7 5 7



4
5 2 2 9
7
U 3 10
R
U 1 2
R
R
U 0 2
A 5